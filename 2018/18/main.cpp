#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MINUTES 1000

#define TEST_INPUT 0

#if TEST_INPUT
#define WIDTH 10
#define HEIGHT 10
static const char * puzzle_input[HEIGHT + 2] = {
	"............",
	"..#.#...|#..",
	"......#|##|.",
	"..|..|...#..",
	"...|#.....#.",
	".#.#|||#|#|.",
	"....#.||....",
	"..|....|....",
	".||...#|.#|.",
	".|.||||..|..",
	"....#.|..|..",
	"............"
};
#else
#define WIDTH 50
#define HEIGHT 50
static const char * puzzle_input[HEIGHT + 2] = {
	"....................................................",
	"...#..|..|..###.||......#.|##.##.|#.||..#..||...|.|.",
	".#.....#..#.|....|.#.|..#..||##.|.|.||#|........##..",
	"..||.|..|.|..##|...|.|.|#|..#.|..|#......||.#...#...",
	".|...#..|..|...|.#||.|||#|..#|..#|..|.||...#.|.|##|.",
	".#......###....||...|#...#|#..||.|..|....##||#..#.#.",
	"..#..#|....|.|...#....#..#.##......|..|.....|#|..|..",
	".##.|.#.|||..|#.|#.......|..#....##..#|..|##|..|.|..",
	"...#..#...#|..#.|.#||#.#..#.##|....#...#.||.........",
	".#.##.......|.#...#.|.|.#||##...|||.......||..|||.#.",
	".|#||...#.|.....|..##...###|#.|.|..##.#..|#....#..|.",
	".#..#.....##.#|##.#.||..||.|||#.|......|..#.||||.#..",
	"...#....#||..|#.....|......#|..#|.|.|#.##|.||.#...#.",
	"...|#..|#.#|...#..#.#####..##..#...........##..#||..",
	"..|.|..|..#...#....|.|.....###.....|.#|.|||.|..##...",
	"...#|.##..###...##||.|...|#.#.##.#....|..#.#..|##...",
	".|...##|.|..##|.|...#..|||.#..##..#....##.....|.....",
	"..#..#....#.#...#|##...#.#..##.|....|##..#..|.....|.",
	"....|...|.....|||.#...|||#.|...||..|#.|..#|....#.#..",
	"..|....#.......###.....|.#...#..#|..|#..##|.........",
	".|...|.#.|##.|||..#........|...|||.#.|#|.#..|.|#|...",
	".#|.....|...|...|..##.#...|..|.#.###....#|.|#.#..#..",
	"..#...|..#.#|...#...|...#.|#..||....|##|.##..|.##.#.",
	"......##.|......|....|......#.|.|...#.....#|.....##.",
	"...#....#...#...#.|...#.......#||.##..|.#....#|.....",
	".|...|.......|||#.....#|.#........#.|..||.|...#.#...",
	"..#|###...#.|.|##...|...||##...|.|.|.....#|..#...#..",
	".#|###..|...##|##.|..#....##.....#...#|..#|.#....|..",
	"..#.#...|..||...#...|..#......|....||.|#...||..#.#..",
	".|.#..|####||.|..||.|.#..#....##.........#.#||...#..",
	".....|.#.#...#....|..|..#..#.....|...#..|.....|.#...",
	".|....|...|#.#|..#.....#|.|..#..#.#......#..#.#.|#|.",
	"...##.....|....#||...#..|..|.||.#.#....#|.#.|||.||#.",
	".#..#....#.|.|##|##....||.#.#.##..|#..|..||#....||..",
	"..|.|..|...#|#.|||.....||#....|.##......|||#..#.|...",
	"....#..|.#.|......#..|..|.##|#..|...##..#......|....",
	".#...##.|....#....#...##.|.....|||.#...#..|......#..",
	"....|.||#.||..||....#|#|#..|...#.##..#.##.#|#.#..##.",
	"....|.|#...|.|.||..|#|#...|#|...#..|..#...|##|#.....",
	"...|..|.............####|..#.#.###.#..#.#.#|||.#|#..",
	"..###||.|#...|..|....#...|||...|...|.....#|.#|||.#..",
	"..##.|..............|..|..#..##..|##.|#.#..||.|.....",
	".|..#.|||..|.##......|.|.......#.##..||||......#|...",
	".....#.||.#.||.|.|.#.|.##.|....##.#.||..||..|.#.|.|.",
	"..|..|..#.#.....#|...##|.||.|.|#|.|.#.....#..|......",
	"...|..#|#|#....#.||....#||.|..#|#.........#..|..||#.",
	"...##|#......#.#|.|...||.#....|##..|.####.......|#..",
	".|..||...#.#.##.|...|#|..|#..|#..|.#.#........#...|.",
	".|.|#...|.#.#...#|.#..#..#.......|#.||....#..|...||.",
	"..||...||.||...|#||.#..|........|.....|.|.|.#...#.#.",
	"........#|........|..|...||...###.|..|#|.|.....||...",
	"...................................................."
};
#endif

#define STRIDE (WIDTH + 2)

enum tile {
	OPEN_GROUND = '.',
	TREES = '|',
	LUMBERYARD = '#'
};

char get_tile(char * tiles, int x, int y) {
	return tiles[y * STRIDE + x];
}

void set_tile(char * tiles, int x, int y, char value) {
	tiles[y * STRIDE + x] = value;
}

int get_resource_value(char * tiles) {
	int ntrees = 0;
	int nlumberyards = 0;
	for (int j = 1; j < HEIGHT + 1; j++) {
		for (int i = 1; i < WIDTH + 1; i++) {
			char t = get_tile(tiles, i, j);
			if (t == TREES) ntrees++;
			if (t == LUMBERYARD) nlumberyards++;
		}
	}
	return ntrees * nlumberyards;
}

int main(int argc, char *argv[]) {
	char * tiles = (char*)malloc(STRIDE * (HEIGHT + 2));
	char * new_tiles = (char*)malloc(STRIDE * (HEIGHT + 2));
	for (int i = 0; i < HEIGHT + 2; i++) {
		memcpy(tiles + i * STRIDE, puzzle_input[i], STRIDE);
		memcpy(new_tiles + i * STRIDE, puzzle_input[i], STRIDE);
	}

	for (int n = 0; n < MINUTES; n++) {
		int total_trees = 0;
		int total_lumberyards = 0;
		for (int y = 1; y < HEIGHT + 1; y++) {
			for (int x = 1; x < WIDTH + 1; x++) {
				int t[3][3] = {
					get_tile(tiles, x - 1, y - 1), get_tile(tiles, x, y - 1), get_tile(tiles, x + 1, y - 1),
					get_tile(tiles, x - 1, y), get_tile(tiles, x, y), get_tile(tiles, x + 1, y),
					get_tile(tiles, x - 1, y + 1), get_tile(tiles, x, y + 1), get_tile(tiles, x + 1, y + 1),
				};

				int ntrees = 0;
				int nlumberyards = 0;
				int *tt = (int*)t;
				for (int i = 0; i < 9; i++) {
					if (i == 4) continue;
					if (tt[i] == TREES) ntrees++;
					if (tt[i] == LUMBERYARD) nlumberyards++;
				}

				char next;
				switch (t[1][1]) {
				case OPEN_GROUND:
					next = (ntrees >= 3) ? TREES : OPEN_GROUND;
					break;
				case TREES:
					next = (nlumberyards >= 3) ? LUMBERYARD : TREES;
					break;
				case LUMBERYARD:
					next = (nlumberyards >= 1 && ntrees >= 1) ? LUMBERYARD : OPEN_GROUND;
					break;
				}
				set_tile(new_tiles, x, y, next);
				if (next == TREES) total_trees++;
				if (next == LUMBERYARD) total_lumberyards++;
			}
		}
		printf("%d: %d * %d = %d\n", n, total_trees, total_lumberyards, total_trees * total_lumberyards);

		// NOTE: Swap buffers
		char *tmp = new_tiles;
		new_tiles = tiles;
		tiles = tmp;
	}

	FILE * f = fopen("out.txt", "w");
	if (f) {
		for (int j = 1; j < HEIGHT + 1; j++) {
			for (int i = 1; i < WIDTH + 1; i++) {
				char t = get_tile(tiles, i, j);
				fputc(t, f);
			}
			fputc('\n', f);
		}
		fclose(f);
	}

	return 0;
}