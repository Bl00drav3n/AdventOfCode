test_input = '''
1
2
3
2024
'''

import time

class DifferenceSequence:
    def __init__(self, lst):
        self.lst = lst

    def __hash__(self):
        # To uniquely identify a sequence from -9 to 9
        # we can encode it in base 19 (representing numbers 0-18).
        h = 0
        for n in self.lst:
            h = 19 * h + n + 9 
        return h
    
    def __repr__(self):
        return repr(self.lst)

def next_secret(n):
    m = n << 6
    n = (n ^ m) & ((1 << 24) - 1)
    m = n >> 5
    n = (n ^ m) & ((1 << 24) - 1)
    m = n << 11
    n = (n ^ m) & ((1 << 24) - 1)
    return n

def print_time_diff(start, end):
    print("Time: {:.3f} sec".format((end - start)/1e9))

def part1(input):
    start = time.time_ns()
    total = 0
    for line in input.strip().split('\n'):
        ninit = int(line)
        n = ninit
        for _ in range(2000):
            n = next_secret(n)
        total += n
    end = time.time_ns()
    
    print("Part 1: The sum of the 2000th secret number generated by each buyer is {}." .format(total))
    print_time_diff(start, end)

def part2(input):
    # It's a bit of a mess, because I didn't have time to clean up, but the idea is
    # to just find all 4-len sequences for all buyers and record the associated price.
    # Then we go through all recorded sequences and accumulate the prices. The maximum
    # price is the answer to p2.
    start = time.time_ns()
    buyers_sequences = []
    for line in input.strip().split('\n'):
        iterations = 2000
        n = int(line)
        prices = [None] * iterations
        differences = [None] * iterations
        subsequences = {}
        buyers_sequences.append(subsequences)
        prices[0] = n % 10
        for i in range(1, iterations):
            n = next_secret(n)
            prices[i] = n % 10
            differences[i] = prices[i] - prices[i - 1]
        for i in range(4, iterations):
            s = hash(DifferenceSequence(differences[i-3:i+1]))
            p = prices[i]
            if not s in subsequences:
                subsequences[s] = []
            subsequences[s].append(p)

    sequences = set()
    for i in range(len(buyers_sequences)):
        sequences = sequences.union(buyers_sequences[i].keys())

    best_prices = []
    for seq in sequences:
        best_price = 0
        for i in range(len(buyers_sequences)):
            if seq in buyers_sequences[i]:
                best_price += buyers_sequences[i][seq][0]
        best_prices.append(best_price)
        
    end = time.time_ns()
    print("Part 2: The most bananas you could get is {}." .format(max(best_prices)))
    print_time_diff(start, end)

print('---TEST---')
part1(test_input)
part2(test_input)

with open('input.txt') as f:
    input = f.read()
    print('---INPUT---')
    part1(input)
    part2(input)
